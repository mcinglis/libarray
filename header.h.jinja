
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libarray.
//
// Libarray is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libarray is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libarray. If not, see <https://gnu.org/licenses/>.


// This file is the result of running:
//     {{' '.join(argv)}}


{% set sys_headers = sys_headers.split() %}
{% set rel_headers = rel_headers.split() %}
{% set typeclasses = typeclasses.split() %}


#ifndef {{include_guard}}
#define {{include_guard}}


#include <libtypes/types.h>
#include <libmacro/nelem.h>

{% for path in sys_headers %}
#include <{{path}}>
{% endfor %}

{% for path in rel_headers %}
#include "{{path}}"
{% endfor %}


bool
arrayc_{{funcname}}__is_valid(
        ArrayC_{{typename}} );


bool
arraym_{{funcname}}__is_valid(
        ArrayM_{{typename}} );


ArrayC_{{typename}}
arrayc_{{funcname}}__new(
        {{type}} const * elements,
        size_t length );


ArrayC_{{typename}}
arrayc_{{funcname}}__from_arraym(
        ArrayM_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__new(
        {{type}} const * elements,
        size_t length );


ArrayM_{{typename}}
arraym_{{funcname}}__new_empty(
        size_t length );


ArrayM_{{typename}}
arraym_{{funcname}}__copy(
        ArrayM_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__copy_arrayc(
        ArrayC_{{typename}} );


void
arraym_{{typename}}__free(
        ArrayM_{{typename}} * xs );


bool
arrayc_{{funcname}}__is_empty(
        ArrayC_{{typename}} );


bool
arraym_{{funcname}}__is_empty(
        ArrayM_{{typename}} );


bool
arrayc_{{funcname}}__same(
        ArrayC_{{typename}},
        ArrayC_{{typename}} );


bool
arraym_{{funcname}}__same(
        ArrayM_{{typename}},
        ArrayM_{{typename}} );


{{type}}
arrayc_{{funcname}}__get(
        ArrayC_{{typename}},
        size_t index );


{{type}}
arraym_{{funcname}}__get(
        ArrayM_{{typename}},
        size_t index );


{{type}} const *
arrayc_{{funcname}}__get_ptr(
        ArrayC_{{typename}},
        size_t index );


{{type}} *
arraym_{{funcname}}__get_ptr(
        ArrayM_{{typename}},
        size_t index );


{{type}}
arraym_{{funcname}}__set(
        ArrayM_{{typename}},
        size_t index,
        {{type}} value );


void
arraym_{{funcname}}__set_all(
        ArrayM_{{typename}},
        {{type}} value );


{{type}}
arrayc_{{funcname}}__first(
        ArrayC_{{typename}} );


{{type}}
arraym_{{funcname}}__first(
        ArrayM_{{typename}} );


{{type}}
arrayc_{{funcname}}__last(
        ArrayC_{{typename}} );


{{type}}
arraym_{{funcname}}__last(
        ArrayM_{{typename}} );


bool
arrayc_{{funcname}}__elem_by(
        ArrayC_{{typename}},
        {{type}},
        bool ( * eq )( {{type}}, {{type}} ) );


bool
arraym_{{funcname}}__elem_by(
        ArrayM_{{typename}},
        {{type}},
        bool ( * eq )( {{type}}, {{type}} ) );


ArrayC_{{typename}}
arrayc_{{funcname}}__take(
        ArrayC_{{typename}},
        size_t n );


ArrayC_{{typename}}
arrayc_{{funcname}}__drop(
        ArrayC_{{typename}},
        size_t n );


ArrayC_{{typename}}
arrayc_{{funcname}}__take_end(
        ArrayC_{{typename}},
        size_t n );


ArrayC_{{typename}}
arrayc_{{funcname}}__drop_end(
        ArrayC_{{typename}},
        size_t n );


bool
arrayc_{{funcname}}__any(
        ArrayC_{{typename}},
        bool ( * f )( {{type}} ) );


bool
arraym_{{funcname}}__any(
        ArrayM_{{typename}},
        bool ( * f )( {{type}} ) );


bool
arrayc_{{funcname}}__all(
        ArrayC_{{typename}},
        bool ( * f )( {{type}} ) );


bool
arraym_{{funcname}}__all(
        ArrayM_{{typename}},
        bool ( * f )( {{type}} ) );



struct arrayc_{{funcname}}__each__options {
    ArrayC_{{typename}} xs;
    void ( * f )( {{type}} );
    bool ( * b )( {{type}} );
    void ( * e )( {{type}} );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
};

bool
arrayc_{{funcname}}__each_(
        struct arrayc_{{funcname}}__each__options );

#define arrayc_{{funcname}}__each( ... ) \
    arrayc_{{funcname}}__each_( \
        ( struct arrayc_{{funcname}}__each__options ){ __VA_ARGS__ } )


struct arraym_{{funcname}}__each__options {
    ArrayM_{{typename}} xs;
    void ( * f )( {{type}} );
    bool ( * b )( {{type}} );
    void ( * e )( {{type}} );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
};

bool
arraym_{{funcname}}__each_(
        struct arraym_{{funcname}}__each__options );

#define arraym_{{funcname}}__each( ... ) \
    arraym_{{funcname}}__each_( \
        ( struct arraym_{{funcname}}__each__options ){ __VA_ARGS__ } )


struct arraym_{{funcname}}__eachp__options {
    ArrayM_{{typename}} xs;
    void ( * f )( {{type}} * );
    bool ( * b )( {{type}} * );
    void ( * e )( {{type}} * );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
};

bool
arraym_{{funcname}}__eachp_(
        struct arraym_{{funcname}}__eachp__options );

#define arraym_{{funcname}}__eachp( ... ) \
    arraym_{{funcname}}__eachp_( \
        ( struct arraym_{{funcname}}__eachp__options ){ __VA_ARGS__ } )


{{type}} const *
arrayc_{{funcname}}__pick(
        ArrayC_{{typename}} const xs,
        bool ( * f )( {{type}} const * pick,
                      {{type}} x ) );


{{type}} *
arraym_{{funcname}}__pick(
        ArrayM_{{typename}} const xs,
        bool ( * f )( {{type}} const * pick,
                      {{type}} x ) );


{% macro typeclass_header(name) -%}
///////////////////////////////////
/// TYPECLASS: {{name}}
///////////////////////////////////
{%- endmacro %}

{% macro typeclass(name) -%}
{% if name in typeclasses %}
{{ typeclass_header(name) }}
{{ caller() }}
{% endif %}
{%- endmacro %}


{% call typeclass('EQ') %}

bool
arrayc_{{funcname}}__equal(
        ArrayC_{{typename}},
        ArrayC_{{typename}} );


bool
arrayc_{{funcname}}__not_equal(
        ArrayC_{{typename}},
        ArrayC_{{typename}} );


bool
arraym_{{funcname}}__equal(
        ArrayM_{{typename}},
        ArrayM_{{typename}} );


bool
arraym_{{funcname}}__not_equal(
        ArrayM_{{typename}},
        ArrayM_{{typename}} );


bool
arrayc_{{funcname}}__elem(
        ArrayC_{{typename}},
        {{type}} );


bool
arrayc_{{funcname}}__not_elem(
        ArrayC_{{typename}},
        {{type}} );


bool
arraym_{{funcname}}__elem(
        ArrayM_{{typename}},
        {{type}} );


bool
arraym_{{funcname}}__not_elem(
        ArrayM_{{typename}},
        {{type}} );


{% endcall %}


#endif // ifndef {{ include_guard }}

